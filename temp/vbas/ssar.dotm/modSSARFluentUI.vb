Attribute VB_Name = "modSSARFluentUI"
'===================================================================================================================================
' Module:       modSSARFluentUI
' Purpose:      Displays controls on the RDA Tab stub appropriate to the Assessment Report being edited or viewed.
'
' Note 1:       If the Assessment Report is not writable the DropDown and Buttons Groups will not be displayed.
' Note 2:       If the current document is not an Assessment Report no Groups will be displayed.
'
'               This allows the user to add and remove permitted sections of the document.
'               Currently the Tab layout consists of four groups of controls:
'               1.  Actions
'                   Contains the buttons for submitting or cancelling an Assessment Report.
'               2.  Report Views
'                   Contains the Refresh and Watermark buttons.
'               3.  Standards
'                   Contains the DropDown control that selects the Standard whose Finding can be added or deleted.
'               4.  ToggleButtons (Standard Sections)
'                   Contains the ToggleButton controls (laid out in Box controls) that allow a user to user to add or delete
'                   Findings for the selected Standard.
'
' Note 3:       The code in this module responds to the callbacks generated by the controls on the RDA Tab.
'
' Note 4:       Proceures are ordered as follows:
'               1.  All Fluent UI callbacks.
'               2.  All procedure used by the call back procedures.
'               3.  The procedures used by the ActionCounter class to obtain information about which Standard is selected and what
'                   row should be added or deleted and what rows should be renamed.
'
' Note 5:       The code in this module is comprised of three distinct functional groups:
'               1. Code to setup and respond (callback procedure) to the Fluent UI
'               2. Code to modify the g_xmlDocument xml.
'               3. Code to modify the Word Assessment Report document.
'
' Note 6:       ToggleButton control layout:
'
'               The toggleButton controls are laid out in 3 rows of 10 columns:
'
'               --------  --------  --------  --------  --------  --------
'               |   1  |  |   2  |  |   3  |  |   4  |  |   5  |  |   6  |
'               --------  --------  --------  --------  --------  --------
'               --------  --------  --------  --------  --------  --------
'               |   7  |  |   8  |  |   9  |  |  10  |  |  11  |  |  12  |
'               --------  --------  --------  --------  --------  --------
'               --------  --------  --------  --------  --------  --------
'               |  13  |  |  14  |  |  15  |  |  16  |  |  17  |  |  18  |
'               --------  --------  --------  --------  --------  --------
'
'               They are used in columns rather than sequentially, here is how they are used based on the number of toggleButtons
'               required.
'
'               Required    Layout used
'               --------    --------------------------------
'                1 -  3     Row  1,   Columns 1-3
'                4 -  6     Rows 1-2, Columns 1-3
'                7 -  9     Rows 1-3, Columns 1-3
'               10 - 12     Rows 1-3, Columns 1-4
'               13 - 15     Rows 1-3, Columns 1-5
'               16 - 18     Rows 1-3, Columns 1-6
'
' Examples:     If 12 buttons are required, buttons:  1,  2,  3,  4,
'                                                     7,  8,  9, 10,
'                                                    13, 14, 15, 16  will be used.
'
'               If 17 buttons are required, buttons:  1,  2,  3,  4,  5,  6,
'                                                     7,  8,  9, 10, 11, 12,
'                                                    13, 14, 15, 16, 17      will be used.
'
'
' Author:       Peter Hewett - Inner Word Limited (innerword@xnet.co.nz)
' Copyright:    Ministry of Social Development (MSD) ©2016 All rights reserved.
' Contact       Inner Word Limited
' details:      134 Kahu Road
'               Paremata
'               Porirua City
'               5024
'               T: +64 4 233 2124
'               M: +64 21 213 5063
'               E: innerword@xnet.co.nz
'
' History:      01/06/16    1.  Created.
'===================================================================================================================================
Option Explicit

' Built in Word Control Id's
Private Const mc_WCTabHome                              As String = "TabHome"

' Fluent UI Control Id's
Private Const mc_cidTabSSAR                             As String = "msdTRDA"
Private Const mc_cidGroupActions                        As String = "msdGActions"
Private Const mc_cidGroupReportViews                    As String = "msdGReportViews"
Private Const mc_cidGroupReportTypes                    As String = "msdGReportTypes"
Private Const mc_cidGroupDropDown                       As String = "msdGDropDown"
Private Const mc_cidGroupButtonsStrength                As String = "msdGButtonsStrength"
Private Const mc_cidGroupButtonsRecommendation          As String = "msdGButtonsRecommendation"
Private Const mc_cidButtonSubmit                        As String = "msdBSubmit"
Private Const mc_cidButtonCancel                        As String = "msdBCancel"
Private Const mc_cidButtonRefresh                       As String = "msdBRefresh"
Private Const mc_cidToggleButtonWatermark               As String = "msdTBWatermark"
Private Const mc_cidButtonReportFull                    As String = "msdBReportFull"
Private Const mc_cidButtonReportSummary                 As String = "msdBReportSummary"
Private Const mc_cidDropDown                            As String = "msdDD"
Private Const mc_cidBox1Strength                        As String = "msdBx1Strength"            ' Used to group ToggleButton Strength controls  1- 6
Private Const mc_cidBox2Strength                        As String = "msdBx2Strength"            ' Used to group ToggleButton Strength controls  7-12
Private Const mc_cidBox3Strength                        As String = "msdBx3Strength"            ' Used to group ToggleButton Strength controls 13-18
Private Const mc_cidBox1Recommendation                  As String = "msdBx1Recommendation"      ' Used to group ToggleButton Recommendation controls  1- 6
Private Const mc_cidBox2Recommendation                  As String = "msdBx2Recommendation"      ' Used to group ToggleButton Recommendation controls  7-12
Private Const mc_cidBox3Recommendation                  As String = "msdBx3Recommendation"      ' Used to group ToggleButton Recommendation controls 13-18
Private Const mc_cidToggleButtonBaseNameStrength        As String = "msdTB_S"                   ' Base name for all ToggleButton Strength controls
Private Const mc_cidToggleButtonBaseNameRecommendation  As String = "msdTB_R"                   ' Base name for all ToggleButton Recommendation controls

Private Const mc_toggleButtonCount                      As Long = 18                            ' 6 columns, 3 rows

Private Const mc_successfulSubmitConfirmation           As String = "The report was submitted successfully."

' ToggleButton caption text
Private Const mc_tbLabelText1Digit                      As String = "Criteria   "               ' Used for displaying a toggleButton with one digit in the displayed text
Private Const mc_tbLabelText2Digit                      As String = "Criteria "                 ' Used for displaying a toggleButton with two digits in the displayed texts

' Findings Types
Private Const mc_ftCriticalAction                       As String = "Critical Action"
Private Const mc_ftRecommendation                       As String = "Recommendation"
Private Const mc_ftRequiredAction                       As String = "Required Action"
Private Const mc_ftStrength                             As String = "Strength"

' Exceptions Table cells
Private Const mc_cellCriteria                           As Long = 1         ' The cell (row relative) that contains the criteria number
Private Const mc_cellFindingsType                       As Long = 3         ' The cell (row relative) that contains the findings type

' Message used after Submitting dates for assessment report xml update and one or more dates are invalid
Private Const mc_errorDateValidation As String = "One or more dates were found to be incorrectly formatted." & vbCr & _
                                                 "To help you identify these dates they have had their background" & vbCr & _
                                                 "set to pinkish colour." & vbCr & vbCr & _
                                                 "Please correct these dates and resubmit the Assessment Report."


Private m_ribbon                    As Office.IRibbonUI         ' Reference to the Fluent UI Ribbon object
Private m_insertAfterRow            As Long                     ' The row number in which to insert a new row in an Exceptions Table
Private m_insertIndex               As Long
Private m_primaryItemNames()        As String
Private m_recommendationStateInfo() As Boolean                  ' Store the Recommendation toggleButton controls (pressed) state
Private m_rowToDelete               As Long                     ' The Exceptions Table row to be deleted
Private m_selectedDropDownIndex     As Long                     ' The adjusted index value of the selected drop down item
Private m_selectedDropDownValue     As String
Private m_firstRowToRename          As Long
Private m_lastRowToRename           As Long
Private m_strengthStateInfo()       As Boolean                  ' Store the Strength toggleButton controls (pressed) state
Private m_tbMap()                   As Long                     ' Maps a index number to an allocated toggleButton control
Private m_tbReverseMap()            As Long                     ' Return the index number for a given toggleButton control number
Private m_xmlTemporary              As MSXML2.DOMDocument60     ' Used for adding new nodes to g_xmlDocument

'=======================================================================================================================
' Procedure:    FUI_UILoaded
' Purpose:      The load ribbon (customUI.onLoad) callback procedure.
' Notes:        This is where the inital reference to the ribbon ui object is obtained.
'
' On Entry:     ribbon              Contains a reference to the Fluent UI Ribbon object.
'=======================================================================================================================
Public Sub FUI_UILoaded(ByVal ribbon As IRibbonUI)
    Const c_proc As String = "modSSARFluentUI.FUI_UILoaded"

    Debug.Print "SSAR." & c_proc & ", ribbon Is Nothing: " & (ribbon Is Nothing)

    ' It is essential to store a references to the ribbon or we can't invalidate controls
    Set m_ribbon = ribbon

    EventLog "m_ribbon Is Nothing = " & (m_ribbon Is Nothing), c_proc

    If IsAssessmentReport Then
        SSAR_RibbonReset
    Else
        SSAR_InvalidateGroupControls
    End If
End Sub ' FUI_UILoaded

Public Sub FUI_TabRDA_getVisible(ByVal control As IRibbonControl, _
                                 ByRef tabVisible As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_TabRDA_getVisible"

    ' The SSAR Tab control is only visible if the current document is a Manifest 4 assessment report
    If IsAssessmentReport Then
        tabVisible = (g_rootData.ManifestVersion > 3)
    End If

    Debug.Print c_proc & " - tabVisible: " & tabVisible
End Sub ' FUI_TabRDA_getVisible

'=======================================================================================================================
' Procedure:    FUI_G_getVisible
' Purpose:      The Group getVisible callback procedure.
'               This procedure determines whether the control should be visible or not.
' Notes:        This callback is used by ALL Group controls.
'
' On Entry:     control             The control this callback is for.
'               groupVisible        Ignored.
' On Exit:      groupVisible        True if this control should be displayed.
'=======================================================================================================================
Public Sub FUI_G_getVisible(ByVal control As IRibbonControl, _
                            ByRef groupVisible As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_G_getVisible"

    ' The Group controls are only visible if the active document is an Assessment Report
    If IsAssessmentReport Then
        If control.Id = mc_cidGroupActions Then
            groupVisible = Not g_hasBeenSubmitted
        ElseIf control.Id = mc_cidGroupReportViews Or control.Id = mc_cidGroupReportTypes Then
            If Not g_rootData Is Nothing Then
                groupVisible = (g_rootData.ManifestVersion > 3)
            End If
        Else
            If Not g_rootData Is Nothing Then
                groupVisible = g_rootData.IsWritable
            End If
        End If
    End If
End Sub ' FUI_G_getVisible

'=======================================================================================================================
' Procedure:    FUI_BCancel_getLabel
' Purpose:      The Button getLabel callback procedure.
' Purpose:      This procedure returns the text displayed by the passed in Button control.
' Notes:        This button is labeled as "Cancel' or 'Close' depending on whether the Assessment Report can be updated.
'               If the Assessment Report can be updated then 'Cancel' is displayed.
'               If the Assessment Report can not be updated then 'Close' is displayed.
'
' On Entry:     control             The control this callback is for.
'               labelText           Ignored.
' On Exit:      labelText           The text displayed by the Button control.
'=======================================================================================================================
Public Sub FUI_BCancel_getLabel(ByVal control As IRibbonControl, _
                                ByRef labelText As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_BCancel_getLabel"

    ' For conformity with the way InfoPath did its thing we change the label caption depending on the View
    If IsAssessmentReport Then
        If g_rootData.IsWritable Then
            labelText = "Cancel"
        Else
            labelText = "Close"
        End If
    End If
End Sub ' FUI_BCancel_getLabel

'=======================================================================================================================
' Procedure:    FUI_BCancel_onAction
' Purpose:      The Cancel/Close Button onAction callback procedure.
' Note 1:       Cancels any/all changes to the Assessment Report.
' Note 2:       If the button is labeled as "Cancel' then the Assessment Report xml is reloaded wiping out any changes
'               the user may have made to the data and the reloaded xml is submitted to the Remedy/RDA webservice.
' Note 3:       If the button is labeled as "Close' then we do not submit the xml to the Remedy/RDA webservice.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BCancel_onAction(ByVal control As IRibbonControl)
    Const c_proc         As String = "modSSARFluentUI.FUI_BCancel_onAction"
    Const c_msgboxPrompt As String = "Are you sure you want to discard any/all changes?"
    Const c_msgboxTitle  As String = "Cancel Assessment Report"

    On Error GoTo Do_Error

    EventLog "Fluent UI - Cancel", c_proc

    If IsAssessmentReport Then
        If g_rootData.IsWritable Then

            ' This is for when the button is labeled 'Cancel'
            If MsgBox(c_msgboxPrompt, vbYesNo Or vbDefaultButton2 Or vbQuestion, c_msgboxTitle) = vbYes Then

                ' Close the Assessment Report document
                CloseAssessmentReportDocument

                ' We need to discard any changes made to the Assessment Report xml.
                ' The easiest way to do this is to reload the original Assessment Report xml.
                If LoadAssessmentReport(g_configuration.InputXMLFileFullPath) Then

                    ' Set the 'Assessment' nodes 'dataChanged' attribute to "No"
                    SetDataChangedAttribute False

                    ' Now submit the xml (in g_xmlDocument) to the Remedy/RDA webservice
                    SubmitXMLToWebService True
                End If
            Else
                Exit Sub
            End If
        Else

            ' Close the Assessment Report document
            CloseAssessmentReportDocument

            ' At this point the RDA Tab is no longer usable for this Assessment Report so disable it
            ResetAlmostEverything
        End If
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_BCancel_onAction

'=======================================================================================================================
' Procedure:    FUI_BFullReport_getVisible
' Purpose:      The Full Report Button onAction callback procedure.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BFullReport_getVisible(ByVal control As IRibbonControl, _
                                      ByRef buttonVisible As Variant)
    buttonVisible = IsAssessmentReport
End Sub ' FUI_BFullReport_getVisible

'=======================================================================================================================
' Procedure:    FUI_BFullReport_onAction
' Purpose:      The Full Report Button onAction callback procedure.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BFullReport_onAction(ByVal control As IRibbonControl)
    Const c_proc As String = "modSSARFluentUI.FUI_BFullReport_onAction"

    On Error GoTo Do_Error

    EventLog "Fluent UI - Full Report", c_proc

    ' Generate a Full Report assessment report from the current assessment report
    GenerateFullReport

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_BFullReport_onAction

'=======================================================================================================================
' Procedure:    FUI_BRefresh_getVisible
' Purpose:      The Refresh Button onAction callback procedure.
' Notes:        The Refresh button is only visible when the Assessment Report is updateable.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BRefresh_getVisible(ByVal control As IRibbonControl, _
                                   ByRef buttonVisible As Variant)
    If IsAssessmentReport Then
        buttonVisible = g_rootData.IsWritable
    End If
End Sub ' FUI_BRefresh_getVisible

'=======================================================================================================================
' Procedure:    FUI_BRefresh_onAction
' Purpose:      The Refresh Button onAction callback procedure.
' Notes:        Updates all Ref Fields (called roll-up by MSD as it updates data in the executive summary).
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BRefresh_onAction(ByVal control As IRibbonControl)
    Const c_proc As String = "modSSARFluentUI.FUI_BRefresh_onAction"

    On Error GoTo Do_Error

    EventLog "Fluent UI - Refresh", c_proc

    ' Refresh everything that needs regenerating in the current Assessment Report
    SSARFullRefresh

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_BRefresh_onAction

'=======================================================================================================================
' Procedure:    FUI_BSubmit_getVisible
' Purpose:      The Submit Button controls getVisible callback procedure.
'
' On Entry:     control             The control this callback is for.
'               buttonVisible       Ignored.
' On Exit:      buttonVisible       True if the button is visible
'=======================================================================================================================
Public Sub FUI_BSubmit_getVisible(ByVal control As IRibbonControl, _
                                  ByRef buttonVisible As Variant)
    If IsAssessmentReport Then
        If Not g_rootData Is Nothing Then
            buttonVisible = g_rootData.IsWritable
        End If
    End If
End Sub ' FUI_BSubmit_getVisible

'=======================================================================================================================
' Procedure:    FUI_BSubmit_onAction
' Purpose:      The Submit Button onAction callback procedure.
' Note 1:       This code does not concern itself about whether the assessment report is editable or not as this control
'               shouild not be enabled if the assessment report is not editable.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BSubmit_onAction(ByVal control As IRibbonControl)
    Const c_proc As String = "modSSARFluentUI.FUI_BSubmit_onAction"

    Dim allActions  As Actions
    Dim arFile      As Scripting.File
    Dim arFullName  As String
    Dim theFSO      As Scripting.FileSystemObject

    On Error GoTo Do_Error

    EventLog "Fluent UI - Submit", c_proc

    ' This really should not be necessary
    If IsAssessmentReport Then

        ' Check that the document does not contain prohibited content
        If PreSubmitVetting Then

            ' Set the 'Assessment' nodes 'dataChanged' attribute to "Yes"
            SetDataChangedAttribute True

            ' Validate all editable date fields (and update the underlying Assessment Report xml)
            If UpdateEditableDatesXML Then

                ' The 'action' list used to build the Assessment Report is now used to update the assessment report
                Set allActions = g_instructions.Actions

                ' Update the assessment report xml with values of the Content Controls
                allActions.UpdateContentControlXML

                ' Now take all editable RichText and Multiline input areas and indirectly
                ' use that data to update the underlying Assessment Report xml
                UpdateAssessmentReportXMLUsingRichText

                ' Save and close the Assessment Report document, this is to circumvent the orphan document problem caused by
                ' submitting the Assessment Report xml and then closing the Assessment Report document, which leaves a window
                ' with no document that is not included in Words global Documents object Count!
                SaveAndCloseAssessmentReportDocument

                ' Get the name pf the saved Assessment Report document file
                arFullName = g_configuration.AssessmentReportFileFullName

                ' Now return the xml (in g_xmlDocument) to the Remedy/RDA webservice
                If SubmitXMLToWebService Then
                    MsgBox mc_successfulSubmitConfirmation, vbOKOnly And vbExclamation, ssarTitle

                    ' Now delete the saved Assessment Report document file
                    Set theFSO = New Scripting.FileSystemObject
                    Set arFile = theFSO.GetFile(arFullName)
                    arFile.Delete True
                    Set theFSO = Nothing
                Else

                    ' Reopen the Assessment Report document so that the user can see that they have not lost their work.
                    ' Do not assign the the document to g_assessmentReport as this will prevent the user from creating
                    ' a new Assessment Report.
                    Documents.Open arFullName
                End If
            End If
        End If
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_BSubmit_onAction

'=======================================================================================================================
' Procedure:    FUI_BSummaryReport_getVisible
' Purpose:      The Summary Report Button onAction callback procedure.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BSummaryReport_getVisible(ByVal control As IRibbonControl, _
                                         ByRef buttonVisible As Variant)
    buttonVisible = IsAssessmentReport
End Sub ' FUI_BSummaryReport_getVisible

'=======================================================================================================================
' Procedure:    FUI_BSummaryReport_onAction
' Purpose:      The Summary Report Button onAction callback procedure.
'
' On Entry:     control             The control this callback is for.
'=======================================================================================================================
Public Sub FUI_BSummaryReport_onAction(ByVal control As IRibbonControl)
    Const c_proc As String = "modSSARFluentUI.FUI_BSummaryReport_onAction"

    On Error GoTo Do_Error

    EventLog "Fluent UI - Summary Report", c_proc

    ' Generate a Full Report assessment report from the current assessment report
    GenerateSummaryReport

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_BSummaryReport_onAction

'=======================================================================================================================
' Procedure:    FUI_DD_getItemCount
' Purpose:      The DropDown controls getItemCount callback procedure.
'               We return the number of items in the DropDown list. As a consequence of this, FUI_DD_getItemLabel will
'               be called itemCount number of times.
'
' On Entry:     control             The control this callback is for.
'               itemCount           Ignored.
' On Exit:      itemCount           The number of items we want to add to the DropDown list.
'=======================================================================================================================
Public Sub FUI_DD_getItemCount(ByVal control As IRibbonControl, _
                               ByRef itemCount As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_DD_getItemCount"

'''    EventLog c_proc
    If Not Not m_primaryItemNames Then
        itemCount = UBound(m_primaryItemNames)
        EventLog "Item count: " & itemCount, c_proc
    End If
End Sub ' FUI_DD_getItemCount

'=======================================================================================================================
' Procedure:    FUI_DD_getItemLabel
' Purpose:      The DropDown controls getItemLabel callback procedure.
'
' On Entry:     control             The control this callback is for.
'               index               The index value of the item that we need to return a label for.
'               labelText           Ignored
' On Exit:      labelText           The label text to be displayed by the indexed item of the DropDown control.
'=======================================================================================================================
Public Sub FUI_DD_getItemLabel(ByVal control As IRibbonControl, _
                               ByVal index As Integer, _
                               ByRef labelText As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_DD_getItemLabel"

'''    EventLog c_proc
    If Not Not m_primaryItemNames Then
        labelText = m_primaryItemNames(index + 1)
    End If
End Sub ' FUI_DD_getItemLabel

'=======================================================================================================================
' Procedure:    FUI_DD_onAction
' Purpose:      The DropDown controls onAction callback procedure.
'
' On Entry:     control             The control this callback is for.
'               id                  The id (name) of the control this callback is for.
'               index               The index of the item that was pressed.
' On Exit:      m_tbMap                     Array setup.
'               m_tbReverseMap              Array setup
'               m_strengthStateInfo         Array setup.
'               m_recommendationStateInfo   Array setup.
'=======================================================================================================================
Public Sub FUI_DD_onAction(ByVal control As IRibbonControl, _
                           ByVal Id As String, _
                           ByVal index As Integer)
    Const c_proc As String = "modSSARFluentUI.FUI_DD_onAction"

    Dim itemCount     As Long
    Dim theQuery      As String
    Dim theNodes      As MSXML2.IXMLDOMNodeList

    On Error GoTo Do_Error

    EventLog "Fluent UI - DropDown", c_proc

'''    Debug.Print c_proc & " id = " & Id & ", index = " & index

    ' Save the selected drop down items adjusted index value (it is zero based) whereas xpath and the bookmarks are 1 based
    m_selectedDropDownIndex = index + 1

    ' Query retrieves nodes used to build the DropDown controls items
    theQuery = Replace$(g_instructions.UserInterface.QueryNumberOfToggleButtons, mgrP1, m_selectedDropDownIndex)

    Debug.Print theQuery

    ' Run the query to retieve the nodes that will provide the data for the Primary dropDown control
    Set theNodes = g_xmlDocument.SelectNodes(theQuery)

    ' Set up the mapping of data to toggleButton control based on how many toggleButton controls are actually required
    itemCount = theNodes.Length
    If itemCount > 0 Then

        ' Genearate the button map so that we know what controls we are using and what controls should be invisible
        GenerateButtonMap itemCount

        If Not m_ribbon Is Nothing Then

            Debug.Print c_proc & " toggleButton count: " & itemCount

            ' Save the index value so that we can access it from other controls callback procedures
            m_selectedDropDownValue = m_primaryItemNames(m_selectedDropDownIndex)

            ' Set up the toggleButton state arrays so that the user can see if a button is selected or not
            With g_instructions.UserInterface
                SetToggleButtonsTickState m_strengthStateInfo, .QueryTickedStrengthButtons, m_selectedDropDownIndex
                SetToggleButtonsTickState m_recommendationStateInfo, .QueryTickedRecommendationButtons, m_selectedDropDownIndex
            End With
        End If
    End If

   ' #TRY#  The toggle button controls Get properties are dependent upon the arrays m_strengthStateInfo and m_recommendationStateInfo
   '        which are being setup in the loop above
    InvalidateToggleButtonControls

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_DD_onAction

'=======================================================================================================================
' Procedure:    FUI_Recommendation_getImage
' Purpose:      The Recommendation toggleButton getImage callback procedure.
'               This procedure determines whether a tick or no image is displayed by each Recommendation control.
' Notes:        This callback is used by ALL toggle button controls grouped on the Recommendation Tab.
'
' On Entry:     control             The control this callback is for.
'               imageMso            Ignored.
' On Exit:      imageMso            The image or Null to be display by this control.
'=======================================================================================================================
Public Sub FUI_Recommendation_getImage(ByVal control As IRibbonControl, _
                                       ByRef imageMso As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Recommendation_getImage"

    Dim controlNumber As Long
    Dim display       As Boolean

    If Not Not m_recommendationStateInfo Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        ' If this control is selected (pressed = True) then it should display the tick image
        display = m_recommendationStateInfo(controlNumber)
        SetupSectionImage imageMso, display
    End If
End Sub ' FUI_Recommendation_getImage

'=======================================================================================================================
' Procedure:    FUI_Recommendation_getLabel
' Purpose:      The Recommendation toggleButton getLabel callback procedure.
'               This procedure returns the text displayed by the passed in Recommendation ToggleButton control.
' Notes:        This callback is used by ALL toggle button controls grouped on the Recommendation Tab.
'
' On Entry:     control             The control this callback is for.
'               labelText           Ignored.
' On Exit:      labelText           The text displayed by the toogleButton control.
'=======================================================================================================================
Public Sub FUI_Recommendation_getLabel(ByVal control As IRibbonControl, _
                                       ByRef labelText As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Recommendation_getLabel"

    Dim controlNumber As Long
    Dim index         As Long

    If Not Not m_tbMap Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        ' Now get the actual items number so that it can be displayed as part of the label
        index = m_tbReverseMap(controlNumber)

        ' Now create the label
        If index < 10 Then
            labelText = mc_tbLabelText1Digit & CStr(index)
        Else
            labelText = mc_tbLabelText2Digit & CStr(index)
        End If
    End If
End Sub ' FUI_Recommendation_getLabel

'=======================================================================================================================
' Procedure:    FUI_Recommendation_getPressed
' Purpose:      The Recommendation toggleButton getPressed callback procedure.
' Notes:        This callback is used by ALL toggle button controls grouped on the Recommendation Tab.
'
' On Entry:     control             The control this callback is for.
'               isPressed           Ignored.
' On Exit:      isPressed           True for pressed.
'=======================================================================================================================
Public Sub FUI_Recommendation_getPressed(ByVal control As IRibbonControl, _
                                         ByRef isPressed As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Recommendation_getPressed"

    Dim controlNumber As Long

    ' This code sets the toggle buttons up to show as pressed (the control displays a gold background) when there is a
    ' corresponding xml and document section for the selected control. Likewise if the user selects a unselected
    ' control its background colour will turn gold, since we will add the necessary xml and document section.

    If Not Not m_recommendationStateInfo Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        isPressed = m_recommendationStateInfo(controlNumber)
    End If
End Sub ' FUI_Recommendation_getPressed

'=======================================================================================================================
' Procedure:    FUI_Recommendation_getVisible
' Purpose:      The Recommendation toggleButton getVisible callback procedure.
'               This procedure determines whether the control should be visible or not.
' Notes:        This callback is used by ALL toggle button controls grouped on the Recommendation Tab.
'
' On Entry:     control             The control this callback is for.
'               toggleButtonVisible Ignored.
' On Exit:      toggleButtonVisible True if this control should be displayed.
'=======================================================================================================================
Public Sub FUI_Recommendation_getVisible(ByVal control As IRibbonControl, _
                                         ByRef toggleButtonVisible As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Recommendation_getVisible"

    Dim controlNumber As Long

    If Not Not m_tbMap Then
        
        controlNumber = ControlIndexFromControlName(control.Id)

        toggleButtonVisible = (m_tbReverseMap(controlNumber) <> 0)
    End If
End Sub ' FUI_Recommendation_getVisible

'=======================================================================================================================
' Procedure:    FUI_Recommendation_onAction
' Purpose:      The Recommendation toggleButton onAction callback procedure.
'               This procedure does the actual work to respond to the button press.
' Notes:        This callback is used by ALL toggle button controls grouped on the Recommendation Tab.
'
' On Entry:     control             The control this callback is for.
'               pressed             True if the control is pressed.
'=======================================================================================================================
Public Sub FUI_Recommendation_onAction(ByVal control As IRibbonControl, _
                                       ByVal pressed As Boolean)
    Const c_proc As String = "modSSARFluentUI.FUI_Recommendation_onAction"

    Dim controlNumber   As Long

    On Error GoTo Do_Error

    EventLog "Fluent UI - Recommendation", c_proc

    ' Make sure the ribbon is valid before trying to use it
    If Not m_ribbon Is Nothing Then

        ' See if the Bookmarks need to be rebuild.  They can get screwed up by the user cutting
        ' and pasting text exactly equal to the Range of the Bookmark being copied and pasted.
        If g_assessmentReport.bookmarks.Count < g_bookmarkCount Then
            RebuildBookmarksBeforeEdit

        ' #DEBUG# Remove this Else branch before production delployment
        Else
            ' #DEBUG# Remove before production deployment - verifies Exception Table integrity
            VerifyAllExceptionsTables
        End If

        ' Get the control number from the control name
        controlNumber = ControlIndexFromControlName(control.Id)

        ' Based on the pressed value we now need to either add something to
        ' the xml and document or delete something from the xml and document
        If (pressed) Then

            AddToXMLAndDocument controlNumber, mc_ftRecommendation
        Else

            DeleteFromXMLAndDocument controlNumber, mc_ftRecommendation
        End If

        ' Toggle the state value
        m_recommendationStateInfo(controlNumber) = Not m_recommendationStateInfo(controlNumber)

        ' We now need to invalidate this control so that the FUI_Recommendation_getImage callback
        ' procedure is called so that the tick mark (image) can be toggled on and off
        m_ribbon.InvalidateControl control.Id

        ' Update the global Bookmark count since it will have changed
        g_bookmarkCount = g_assessmentReport.bookmarks.Count
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_Recommendation_onAction

'=======================================================================================================================
' Procedure:    FUI_Strength_getImage
' Purpose:      The Strength toggleButton getImage callback procedure.
'               This procedure determines whether a tick or no image is displayed by each Strength control.
' Notes:        This callback is used by ALL toggle button controls grouped on the Strength Tab.
'
' On Entry:     control             The control this callback is for.
'               imageMso            Ignored.
' On Exit:      imageMso            The image or Null to be display by this control.
'=======================================================================================================================
Public Sub FUI_Strength_getImage(ByVal control As IRibbonControl, _
                                 ByRef imageMso As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Strength_getImage"

    Dim controlNumber As Long
    Dim display       As Boolean

'''    Debug.Print c_proc

    If Not Not m_strengthStateInfo Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        ' If this control is selected (pressed = True) then it should display the tick image
        display = m_strengthStateInfo(controlNumber)
        SetupSectionImage imageMso, display
    End If
End Sub ' FUI_Strength_getImage

'=======================================================================================================================
' Procedure:    FUI_Strength_getLabel
' Purpose:      The Strength toggleButton getLabel callback procedure.
'               This procedure returns the text displayed by the passed in Strength ToggleButton control.
' Notes:        This callback is used by ALL toggle button controls grouped on the Strength Tab.
'
' On Entry:     control             The control this callback is for.
'               labelText           Ignored.
' On Exit:      labelText           The text displayed by the toogleButton control.
'=======================================================================================================================
Public Sub FUI_Strength_getLabel(ByVal control As IRibbonControl, _
                                 ByRef labelText As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Strength_getLabel"

    Dim controlNumber As Long
    Dim index         As Long

'''    Debug.Print c_proc

    If Not Not m_tbMap Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        ' Now get the actual items number so that it can be displayed as part of the label
        index = m_tbReverseMap(controlNumber)

        ' Now create the label
        If index < 10 Then
            labelText = mc_tbLabelText1Digit & CStr(index)
        Else
            labelText = mc_tbLabelText2Digit & CStr(index)
        End If
    End If
End Sub ' FUI_Strength_getLabel

'=======================================================================================================================
' Procedure:    FUI_Strength_getPressed
' Purpose:      The Strength toggleButton getPressed callback procedure.
' Notes:        This callback is used by ALL toggle button controls grouped on the Strength Tab.
'
' On Entry:     control             The control this callback is for.
'               isPressed           Ignored.
' On Exit:      isPressed           True for pressed.
'=======================================================================================================================
Public Sub FUI_Strength_getPressed(ByVal control As IRibbonControl, _
                                   ByRef isPressed As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Strength_getPressed"

    Dim controlNumber As Long

    ' This code sets the toggle buttons up to show as pressed (the control displays a gold background) when there is a
    ' corresponding xml and document section for the selected control. Likewise if the user selects a unselected
    ' control its background colour will turn gold, since we will add the necessary xml and document section.

'''    Debug.Print c_proc

    If Not Not m_strengthStateInfo Then

        ' Get the sequential number from the control number
        controlNumber = ControlIndexFromControlName(control.Id)

        isPressed = m_strengthStateInfo(controlNumber)
    End If
End Sub ' FUI_Strength_getPressed

'=======================================================================================================================
' Procedure:    FUI_Strength_getVisible
' Purpose:      The Strength toggleButton getVisible callback procedure.
'               This procedure determines whether the control should be visible or not.
' Notes:        This callback is used by ALL toggle button controls grouped on the Strength Tab.
'
' On Entry:     control             The control this callback is for.
'               toggleButtonVisible Ignored.
' On Exit:      toggleButtonVisible True if this control should be displayed.
'=======================================================================================================================
Public Sub FUI_Strength_getVisible(ByVal control As IRibbonControl, _
                                   ByRef toggleButtonVisible As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_Strength_getVisible"

    Dim controlNumber As Long

'''    Debug.Print c_proc

    If Not Not m_tbMap Then
        
        controlNumber = ControlIndexFromControlName(control.Id)

        toggleButtonVisible = (m_tbReverseMap(controlNumber) <> 0)
Debug.Print c_proc & " control.Id: " & control.Id & ", controlNumber: " & controlNumber & ", visible: " & toggleButtonVisible
    End If
End Sub ' FUI_Strength_getVisible

'=======================================================================================================================
' Procedure:    FUI_Strength_onAction
' Purpose:      The Strength toggleButton onAction callback procedure.
'               This procedure does the actual work to respond to the button press.
' Notes:        This callback is used by ALL toggle button controls grouped on the Strength Tab.
'
' On Entry:     control             The control this callback is for.
'               pressed             True if the control is pressed.
'=======================================================================================================================
Public Sub FUI_Strength_onAction(ByVal control As IRibbonControl, _
                                 ByVal pressed As Boolean)
    Const c_proc As String = "modSSARFluentUI.FUI_Strength_onAction"

    Dim controlNumber   As Long

    On Error GoTo Do_Error

    EventLog "Fluent UI - Strength", c_proc

    ' Make sure the ribbon is valid before trying to use it
    If Not m_ribbon Is Nothing Then

        ' See if the Bookmarks need to be rebuild.  They can get screwed up by the user cutting
        ' and pasting text exactly equal to the Range of the Bookmark being copied and pasted.
        If g_assessmentReport.bookmarks.Count < g_bookmarkCount Then
            RebuildBookmarksBeforeEdit

        ' #DEBUG# Remove this Else branch before production delployment
        Else
            ' #DEBUG# Remove before production deployment - verifies Exception Table integrity
            VerifyAllExceptionsTables
        End If

        ' Get the control number from the control name
        controlNumber = ControlIndexFromControlName(control.Id)

        ' Based on the pressed value we now need to either add something to
        ' the xml and document or delete something from the xml and document
        If (pressed) Then

            AddToXMLAndDocument controlNumber, mc_ftStrength
        Else

            DeleteFromXMLAndDocument controlNumber, mc_ftStrength
        End If

        ' Toggle the state value
        m_strengthStateInfo(controlNumber) = Not m_strengthStateInfo(controlNumber)

        ' We now need to invalidate this control so that the FUI_Strength_getImage callback
        ' procedure is called so that the tick mark (image) can be toggled on and off
        m_ribbon.InvalidateControl control.Id

        ' Update the global Bookmark count since it will have changed
        g_bookmarkCount = g_assessmentReport.bookmarks.Count
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' FUI_Strength_onAction

'=======================================================================================================================
' Procedure:    FUI_TBWatermark_getPressed
' Purpose:      The Watermark toggleButton getPressed callback procedure.
' Notes:        This callback is used by ALL toggle button controls grouped on the third Tab.
'
' On Entry:     control             The control this callback is for.
'               isPressed           Ignored.
' On Exit:      isPressed           True for pressed.
'=======================================================================================================================
Public Sub FUI_TBWatermark_getPressed(ByVal control As IRibbonControl, _
                                      ByRef isPressed As Variant)
    Const c_proc As String = "modSSARFluentUI.FUI_TBWatermark_getPressed"

    ' Set the ToggleButton pressed state based on whether the Assessment Report has a Watermark
    isPressed = HasWatermark
End Sub ' FUI_TBWatermark_getPressed

'=======================================================================================================================
' Procedure:    FUI_TBWatermark_getVisible
' Purpose:      The Watermark toggleButton getVisible callback procedure.
'
' On Entry:     control             The control this callback is for.
'               buttonVisible       Ignored.
' On Exit:      buttonVisible       True if the button is visible
'=======================================================================================================================
Public Sub FUI_TBWatermark_getVisible(ByVal control As IRibbonControl, _
                                      ByRef toggleButtonVisible As Variant)
    If Not g_rootData Is Nothing Then
        toggleButtonVisible = (g_rootData.ManifestVersion >= 3)
    End If
End Sub ' FUI_TBWatermark_getVisible

'=======================================================================================================================
' Procedure:    FUI_TBWatermark_onAction
' Purpose:      The TWatermark toggleButton onAction callback procedure.
' Notes:        Adds or removes the Assessment Reports watermark.
'               The watermark in present by default, but the user will want to remove it before printing.
'
' On Entry:     control             The control this callback is for.
'               pressed             True if pressed.
'=======================================================================================================================
Public Sub FUI_TBWatermark_onAction(ByVal control As IRibbonControl, _
                                    ByVal pressed As Boolean)
    Const c_proc As String = "modSSARFluentUI.FUI_TBWatermark_onAction"

    EventLog "Fluent UI - Watermark", c_proc

    ' This just makes this operation visually a little cleaner
    Application.ScreenUpdating = False

    If HasWatermark Then
        RemoveWatermark
    Else
        AddWatermark
    End If

    ' Enable screen updates again now that we have finished updating the assessment report
    Application.ScreenUpdating = True
    Application.ScreenRefresh
End Sub ' FUI_TBWatermark_onAction

'===================================================================================================================================
' Procedure:    AddToDocument
' Purpose:      Adds a new row to the selected standards Exception table.
' Notes:        If no Exception table exists for the selected standard, one will be added.
' Date:         24/07/16    Created
'===================================================================================================================================
Private Sub AddToDocument()
    Const c_proc As String = "modSSARFluentUI.AddToDocument"

    Dim doDocumentProtection As DocumentProtection
    
    On Error GoTo Do_Error

    ' Unprotect the Assessment Report (if it is protected) so that we can add stuff to it.
    ' On termination the instantiated class object will reprotect the document for us.
    Set doDocumentProtection = NewDocumentProtection
    doDocumentProtection.DisableProtection True

    ' Add an Exceptions Table to the current Standard (Key Findings) if one does not already exist.
    ' The logic in the 'addExceptionsTable' instruction list determines whether to insert an Exceptions table.
    g_instructions.UserInterface.ActionSetAddExceptionsTable.BuildAssessmentReport

    ' If we had to add an Exceptions table the m_insertAfterRow counter will be wrong for the 'addExceptionTable'
    ' instruction list. So here we reset it so that a new row is added after the Exceptions table header row.
    If m_insertAfterRow = 0 Then
        m_insertAfterRow = 1
    End If

    ' This executes the 'addExceptionsTable' instruction list which incrementally renames any bookmarks that
    ' follow the row being inserted, then inserts the new row and fills it using the xml data added above
    g_instructions.UserInterface.ActionSetAddExceptionsRow.BuildAssessmentReport

    ' Reprotect the Assessment Report
    Set doDocumentProtection = Nothing

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddToDocument

'=======================================================================================================================
' Procedure:    AddToXML
' Purpose:      Add the required xml to g_xmlDocument (the Assessment Report document).
' Note 1:       Adds a new <findings> node to the assessment reports xml.
' Note 2:       For schema compliance the <findings> nodes must be contiguous and maintained in Criteria, and then
'               Findings Type (Critical Action, Required Action, Strength and Recommendation) order.
'
' On Entry:     insertPosition      The position in the current <standard>'s list of <findings> nodes the new node will
'                                   be inserted in.
'               newCriteriaNumber   The number of the Criteria being added.
'               findingsType        The type of the findings node being added (either Strength or Recommendation).
' On Exit:      g_xmlDocument       Updated with the necessary xml.
'=======================================================================================================================
Private Sub AddToXML(ByVal insertPosition As Long, _
                     ByVal newCriteriaNumber As Long, _
                     ByVal FindingsType As String)
    Const c_proc             As String = "modSSARFluentUI.AddToXML"
    Const c_nonBreakingSpace As Long = 160

    Dim alternativeSibling  As MSXML2.IXMLDOMNode
    Dim newSibling          As MSXML2.IXMLDOMElement
    Dim newXML              As String
    Dim oneNBS              As String
    Dim parentNode          As MSXML2.IXMLDOMNode
    Dim theQuery            As String
    Dim siblingCount        As Long
    Dim siblingNode         As MSXML2.IXMLDOMNode
    Dim siblingNodes        As MSXML2.IXMLDOMNodeList

    Static sixNBS           As String

    On Error GoTo Do_Error

    ' Query to retrieve the parent node we ultimate want to add the xml to
    theQuery = Replace$(g_instructions.UserInterface.QueryParentNodeForAddDelete, mgrP1, m_selectedDropDownIndex)
    Set parentNode = g_xmlDocument.SelectSingleNode(theQuery)

    ' These things just need doing once and the creation of the temporary xml file is a convenient trigger
    If m_xmlTemporary Is Nothing Then

        ' Create the DOMDocument if necessary, we persist it to avoid the overhead of creating it each time we want to use it
        Set m_xmlTemporary = New MSXML2.DOMDocument60

        ' The non breaking space sequence we need for the default narrative value
        oneNBS = Chr$(c_nonBreakingSpace)
        sixNBS = oneNBS & oneNBS & oneNBS & oneNBS & oneNBS & oneNBS
    End If

    ' Get the xml skeleton, then add the data to it (using parameter replacement)
    newXML = Replace$(g_instructions.UserInterface.NewExceptionXML, mgrP1, newCriteriaNumber)
    newXML = Replace$(newXML, mgrP2, sixNBS)
    newXML = Replace$(newXML, mgrP3, FindingsType)

    ' Load the new node structure and data into the temporary DOMDocument object
    If Not m_xmlTemporary.LoadXML(newXML) Then
        Err.Raise mgrErrNoUnexpectedCondition, c_proc, mgrErrTextUnexpectedCondition
    End If

    ' The node tree in the temporary xml document we will add to the assessment report xml
    Set newSibling = m_xmlTemporary.FirstChild

    ' Find out if there are any sibling nodes
    theQuery = Replace$(g_instructions.UserInterface.AllFindings, mgrP1, m_selectedDropDownIndex)
    Set siblingNodes = g_xmlDocument.SelectNodes(theQuery)

    ' We must keep these nodes with the same tag name contiguous within the DOMDocument.
    ' They must also be in Criteria Number and Findings Type order.

    ' If there are sibling nodes locate the node we need to insert before, if the new nodes index value is higher than
    ' any existing index number, then it is inserted before the next expected sibling node that has a different name.
    siblingCount = siblingNodes.Length
    If siblingCount > 0 Then

        ' If the insert position has a lower number than the sibling count then there will be a sibling node with the same tag name
        If insertPosition <= siblingCount Then

            ' Get the sibling node we will insert the new node immediately in front of
            Set siblingNode = siblingNodes(insertPosition - 1)
        End If
    End If

    ' See if a sibling node with the same tag name was found
    If Not siblingNode Is Nothing Then

        ' Insert the new sibling before a sibling with the same tag name
        parentNode.InsertBefore newSibling, siblingNode
    Else

        ' There are no sibling nodes with the same tag name, so find the next sibling with a different tag name
        theQuery = Replace$(g_instructions.UserInterface.QueryNextSiblingDifferentTag, mgrP1, m_selectedDropDownIndex)
        Set alternativeSibling = g_xmlDocument.SelectSingleNode(theQuery)

        ' Insert the new node tree before the alternative sibling node
        parentNode.InsertBefore newSibling, alternativeSibling
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddToXML

'===================================================================================================================================
' Procedure:    AddToXMLAndDocument
' Purpose:      Updates the assessment report xml and assessment report document when adding a row to the selected standards
'               Exception table.
' Notes:        If the standard does not have an Exception table one is added.
' Date:         17/07/16    Created.
'
' On Entry:     controlNumber       .
'               findingsType        The Findings Type being added (either Strength or Recommendation).
' On Exit:      g_xmlDocument       Updated with the xml for the findings just added.
'               g_assessmentReport  Updated with the new row added to the standards Exception table.
'===================================================================================================================================
Private Sub AddToXMLAndDocument(ByVal controlNumber As Long, _
                                ByVal FindingsType As String)
    Const c_proc    As String = "modSSARFluentUI.AddToXMLAndDocument"
    Const c_info    As String = "Standard: %1, Adding row: %2, criteria #: %3, findingsType: %4"

    Dim infoText            As String
    Dim newCriteriaNumber   As Long

    On Error GoTo Do_Error

    ' Get specific information about the Exception table being modified, we need the Standards predicate index number as
    ' it needs to be fed back to the instruction used to modify the actual assessment report. Likewise we need to know the
    ' row number the new table row should be inserted at and the row numbers of the first and last rows to rename.
    newCriteriaNumber = m_tbReverseMap(controlNumber)

    ' If there is no Exception table all three returned variables will have a zero value
    GetExceptionTableInfoAdd newCriteriaNumber, FindingsType, m_insertAfterRow, m_firstRowToRename, m_lastRowToRename

    infoText = Replace$(c_info, mgrP1, CStr(m_selectedDropDownIndex))
    infoText = Replace$(infoText, mgrP2, CStr(m_insertAfterRow + 1))
    infoText = Replace$(infoText, mgrP3, CStr(newCriteriaNumber))
    infoText = Replace$(infoText, mgrP4, FindingsType)
    EventLog infoText, c_proc

    AddToXML m_insertAfterRow, newCriteriaNumber, FindingsType

    ' Now add the text that corresponds to the xml structure we just added
    AddToDocument

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddToXMLAndDocument

'=======================================================================================================================
' Procedure:    ControlIndexFromControlName
' Purpose:      Returns the passed in controls index number which is derived from the controls name.
' Notes:        For this code to work it is expected that the last one or two characters of the control name are
'               numeric.
'
' On Entry:     controlName         The controls name.
' Returns:      The controls index number.
'=======================================================================================================================
Private Function ControlIndexFromControlName(ByVal controlName As String) As Long
    Dim rightOne As String
    Dim rightTwo As String

    ' Get the last character and the last two characters of the controls name
    rightOne = Right$(controlName, 1)
    rightTwo = Right$(controlName, 2)

    If IsNumeric(rightTwo) Then
        ControlIndexFromControlName = CLng(rightTwo)
    ElseIf IsNumeric(rightOne) Then
        ControlIndexFromControlName = CLng(rightOne)
    Else
        Err.Raise 666
    End If
End Function ' ControlIndexFromControlName

'===================================================================================================================================
' Procedure:    DeleteFromDocument
' Purpose:      Deletes a row from an Exceptions table.
' Note 1:       m_selectedDropDownIndex indicates with standard (and hence which Exceptions table) the row will be deleted from.
' Note 2:       We never delete Row 1 as it is a header row.
'
' On Entry:     controlNumber       The number (numeric part of the control name) that indicates which Exceptions table Row to
'                                   delete.
'               findingsType        The findings type (Strength or Recommendation) to be deleted.
'===================================================================================================================================
Private Sub DeleteFromDocument(ByVal controlNumber As Long, _
                               ByVal FindingsType As String)
    Const c_proc    As String = "modSSARFluentUI.DeleteFromDocument"
    Const c_info    As String = "Standard: %1, Deleting row: %2, criteria #: %3, findingsType: %4"

    Dim doDocumentProtection    As DocumentProtection
    Dim infoText                As String
    Dim theCriteriaNumber       As Long

    On Error GoTo Do_Error

    ' Get the criteria number of the row to delete
    theCriteriaNumber = m_tbReverseMap(controlNumber)

    ' Unprotect the Assessment Report (if it is protected) so that we can add stuff to it.
    ' On termination the instantiated class object will reprotect the document for us.
    Set doDocumentProtection = NewDocumentProtection
    doDocumentProtection.DisableProtection True

    ' Get information used by the named counters (ActionCounter) when deleting the table row and renaming bookmarks
    GetExceptionTableInfoDelete theCriteriaNumber, FindingsType, m_rowToDelete, m_firstRowToRename, m_lastRowToRename

    infoText = Replace$(c_info, mgrP1, CStr(m_selectedDropDownIndex))
    infoText = Replace$(infoText, mgrP2, CStr(m_rowToDelete))
    infoText = Replace$(infoText, mgrP3, CStr(theCriteriaNumber))
    infoText = Replace$(infoText, mgrP4, FindingsType)
    EventLog infoText, c_proc

    ' Delete the row from the selected standards Exception table
    g_instructions.UserInterface.ActionSetDeleteExceptionsRow.BuildAssessmentReport

    ' If we've deleted the last data row from the Exceptions table, replace the table with the default text
    g_instructions.UserInterface.ActionSetDeleteExceptionsTable.BuildAssessmentReport

Do_Exit:

    ' Reprotect the Assessment Report
    Set doDocumentProtection = Nothing

    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' DeleteFromDocument

'===================================================================================================================================
' Procedure:    DeleteFromXML
' Purpose:      When deleting a row from an Exceptions table, this procedure deletes the corresponding xml structure.
'
' On Entry:     controlNumber       The number (numeric part of the control name) that specifies predicate index of the xml node to
'                                   be deleted.
'               findingsType        The findings type (Strength or Recommendation) to be deleted.
'===================================================================================================================================
Private Sub DeleteFromXML(ByVal controlNumber As Long, _
                          ByVal FindingsType As String)
    Const c_proc As String = "modSSARFluentUI.DeleteFromXML"

    Dim newCriteriaNumber   As Long
    Dim nodeToDelete        As MSXML2.IXMLDOMNode
    Dim parentNode          As MSXML2.IXMLDOMNode
    Dim theQuery            As String

    On Error GoTo Do_Error

    ' Get the criteria number of the row being deleted (this on its own is not unique)
    newCriteriaNumber = m_tbReverseMap(controlNumber)

    ' Query to retrieve the parent node we ultimate want to add the xml to
    theQuery = Replace$(g_instructions.UserInterface.QueryParentNodeForAddDelete, mgrP1, m_selectedDropDownIndex)
    Set parentNode = g_xmlDocument.SelectSingleNode(theQuery)

    ' Setup the query to retrieve the node we intend to delete
    theQuery = Replace$(g_instructions.UserInterface.QueryDeleteFindingsXML, mgrP1, m_selectedDropDownIndex)
    theQuery = Replace$(theQuery, mgrP2, CStr(newCriteriaNumber))
    theQuery = Replace$(theQuery, mgrP3, FindingsType)

    ' Retrieve the node we intend to delete
    Set nodeToDelete = g_xmlDocument.SelectSingleNode(theQuery)

    ' Delete the required xml data node
    If Not nodeToDelete Is Nothing Then
        parentNode.RemoveChild nodeToDelete
    Else
        Err.Raise mgrErrNoUnexpectedCondition, c_proc, mgrErrTextUnexpectedCondition
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' DeleteFromXML

'===================================================================================================================================
' Procedure:    DeleteFromXMLAndDocument
' Purpose:      Wrapper to delete the selected Exceptions table Row and the corresponding xml node.
'
' On Entry:     controlNumber       The number (numeric part of the control name) that specifies table row and xml predicate index
'                                   to the node to be deleted.
'               findingsType        The findings type (Strength or Recommendation) to be deleted.
'===================================================================================================================================
Private Sub DeleteFromXMLAndDocument(ByVal controlNumber As Long, _
                                     ByVal FindingsType As String)
    Const c_proc    As String = "modSSARFluentUI.DeleteFromXMLAndDocument"

    On Error GoTo Do_Error

    ' Always update the xml before the document as the xml is used to update the document
    DeleteFromXML controlNumber, FindingsType

    ' The context for what to delete from the Assessment Report is determined by the document structure and the g_counters object
    DeleteFromDocument controlNumber, FindingsType

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' DeleteFromXMLAndDocument

'=======================================================================================================================
' Procedure:    GenerateButtonMap
' Purpose:      Based on the passed in value of maxNo determines which toggleButton controls will be used.
'               The toggleButtons are laid out in 3 rows of 6 columns, but only the controls being used are visible.
' Notes:        The controls are used in column groups rather than sequentially. See this modules header for more info.
'
' On Entry:     maxNo               The number of toggleButton controls that will be used.
' On Exit:      m_tbMap             Updated with generated control number mapping.
'=======================================================================================================================
Private Sub GenerateButtonMap(ByVal maxNo As Long)
    Const c_proc         As String = "modSSARFluentUI.GenerateButtonMap"
    Const c_numberOfRows As Long = 3
    Const c_stepInterval As Long = 6

    Dim baseNo          As Long
    Dim carryOver       As Long
    Dim controlNumber   As Long
    Dim divisor         As Long
    Dim index           As Long
    Dim maxNoCopy       As Long
    Dim remainder       As Long

    On Error GoTo Do_Error

    EventLog c_proc

    ' Always redim these arrays as it is a quick way of setting all elements to zero
    ReDim m_tbMap(1 To mc_toggleButtonCount)
    ReDim m_tbReverseMap(1 To mc_toggleButtonCount)

    ' Initialise baseNo used for row roll over
    baseNo = 1

    ' Calculate the divisor based on the total number of toggleButton controls that will be used.
    ' This causes the controls to be used in a non linear manner, which in turn makes the Tab Group look better.
    ' See the documentation in this modules header for a detailed explanation of what is going on here.
    maxNoCopy = maxNo
    divisor = 3
    Do While maxNoCopy > 5
        divisor = divisor + 1
        maxNoCopy = maxNoCopy - c_numberOfRows
    Loop

'''    Debug.Print "divisor = " & divisor

    ' Determine which toggleButton controls will actually be used
    For index = 1 To maxNo
        remainder = index Mod divisor

        ' If the remainder is zero the next control number (not this control number) will be one on the next row
        If remainder = 0 Then

            ' Increment the control number as usual
            controlNumber = controlNumber + 1

            ' Setup baseNo to use the toggleButton controls in the next row of controls (there are 3 rows of controls)
            baseNo = baseNo + c_stepInterval

            ' Set the control number that will be used by the next loop iteration
            carryOver = baseNo
        Else
        
            ' If carryOver is non zero then this control start at the beginning of the next row
            If carryOver > 0 Then
            
                ' Overwrite the counter value with the value of the first control in the next row
                controlNumber = carryOver

                ' carryOver now needs to be reset
                carryOver = 0
            Else

                ' Just increment the counter as usual
                controlNumber = controlNumber + 1
            End If
        End If

        ' Map the linear control number (index) to the actual toggleButton control number
        m_tbMap(index) = controlNumber

        ' Map the control number to its index number
        m_tbReverseMap(controlNumber) = index

'''        Debug.Print controlNumber
    Next

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' GenerateButtonMap

'===================================================================================================================================
' Procedure:    GetExceptionTableInfoAdd
' Purpose:      Calculates where in a table a new row should be added given the Criteria value and whether a Strength or
'               Recommendation is being added.
' Note 1:       The table is expected to be n+1 rows of three columns. The +1 is the table header row.
'               Column 1:   Criteria number
'               Column 2:   Finding narrative
'               Column 3:   Findings type (Critical action, Required action, Strength, Recommendation.
' Note 2:       The table is maintained in criteria number order, and within criteris number it is ordered by:
'               1.  Critical action
'               2.  Required action
'               3.  Strength
'               4.  Recommendation
'
' Date:         08/07/16    Created.
'
' On Entry:     newCriteria         The number of the criteria to insert.
'               newFindingType      The finding type (Strength or Recommendation) to insert.
'               insertAfterRow      Unused.
'               firstRowIndex       Unused.
'               lastRowIndex        Unused.
' On Exit:      insertAfterRow      The row after which, the new row will be inserted.
'               firstRowIndex       The row to start (inclusive) bookmark renaming (zero if no rows).
'               lastRowIndex        The row to end (inclusive) bookmark renaming (zero if no rows).
'===================================================================================================================================
Private Sub GetExceptionTableInfoAdd(ByVal newCriteria As Long, _
                                     ByVal newFindingType As String, _
                                     ByRef insertAfterRow As Long, _
                                     ByRef renameFirstRowIndex As Long, _
                                     ByRef renameLastRowIndex As Long)
    Const c_proc    As String = "modSSARFluentUI.GetExceptionTableInfoAdd"

    Dim cellRange               As Word.Range
    Dim currentCriteriaNumber   As Long
    Dim currentFindingsType     As String
    Dim exceptionsRow           As Word.Row
    Dim rowCount                As Long
    Dim rowIndex                As Long
    Dim theTable                As Word.Table

    On Error GoTo Do_Error

    ' Force the values of the variables we will return values through to zero in case they contain non zero values
    insertAfterRow = 0
    renameFirstRowIndex = 0
    renameLastRowIndex = 0

    ' Get a refererence to the Exceptions table that we need to return information about
    Set theTable = GetExceptionsTable(m_selectedDropDownIndex)

    ' Make sure the Exception table actually exists before trying to use it!
    If Not theTable Is Nothing Then

        ' Get the table row count which includes the header row
        rowCount = theTable.Rows.Count
        For rowIndex = 1 To rowCount
            Set exceptionsRow = theTable.Rows(rowIndex)

            ' Ignore the first row as it is the table Header
            If Not exceptionsRow.IsFirst Then

                ' Criteria number of the current row
                Set cellRange = exceptionsRow.Cells(mc_cellCriteria).Range
                cellRange.End = cellRange.End - 1
                currentCriteriaNumber = CLng(cellRange.Text)

                ' If the new Criteria number is less than the current rows criteria number, keep going
                If newCriteria < currentCriteriaNumber Then
                    If insertAfterRow = 0 Then
                        insertAfterRow = exceptionsRow.index - 1
                    End If
                    Exit For
                ElseIf newCriteria = currentCriteriaNumber Then

                    ' Extract the current Findings Type
                    Set cellRange = exceptionsRow.Cells(mc_cellFindingsType).Range
                    cellRange.End = cellRange.End - 1
                    currentFindingsType = cellRange.Text

                    ' The new criteria number and the current rows criteria number match, so now check the finding type
                    If newFindingType = mc_ftRecommendation Then

                        ' Recommendations are the lowest sort order item, so a new Recommendation must be after everything else
                        insertAfterRow = exceptionsRow.index
                    Else
                        If currentFindingsType = mc_ftCriticalAction Then
                            insertAfterRow = exceptionsRow.index
                        ElseIf currentFindingsType = mc_ftRequiredAction Then
                            insertAfterRow = exceptionsRow.index
                        Else

                            ' We are inserting a Strength and the last item must be a Recommendation, so we insert before the Recommendation row
                            insertAfterRow = exceptionsRow.index - 1
                        End If
                    End If
                End If
            End If
        Next
    End If

    ' The new Exceptions table row must be inserted after the last row in the table
    If insertAfterRow = 0 Then
        insertAfterRow = rowCount
    End If

    ' Setup the remaining information that we need to return
    If insertAfterRow < rowCount Then
        renameFirstRowIndex = insertAfterRow + 1
        renameLastRowIndex = rowCount
    Else
        renameFirstRowIndex = 0
        renameLastRowIndex = 0
    End If

'''    MsgBox "Insert after row: " & insertAfterRow & vbCr & _
'''           "First row index:  " & renameFirstRowIndex & vbCr & _
'''           "Last row index:   " & renameLastRowIndex

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub '  GetExceptionTableInfoAdd

'===================================================================================================================================
' Procedure:    GetExceptionTableInfoDelete
' Purpose:      Calculates where in an Exceptions table the row to be deleted is.
' Note 1:       Because the first row is a header row we never delete row 1.
'
' Date:         25/07/16    Created.
'
' On Entry:     newCriteriaNumber   The number of the criteria to delete.
'               newFindingType      The finding type (Strength or Recommendation) to insert.
'               rowToBeDeleted      Unused.
'               firstRowToRename    Unused.
'               lastRowToRename     Unused.
' On Exit:      insertAfterRow      The number of the row to be deleted.
'               firstRowToRename    The row to start (inclusive) bookmark renaming (zero if no rows).
'               lastRowToRename     The row to end (inclusive) bookmark renaming (zero if no rows).
'===================================================================================================================================
Private Sub GetExceptionTableInfoDelete(ByVal newCriteriaNumber As Long, _
                                        ByVal newFindingType As String, _
                                        ByRef rowToBeDeleted As Long, _
                                        ByRef firstRowToRename As Long, _
                                        ByRef lastRowToRename As Long)
    Const c_proc    As String = "modSSARFluentUI.GetExceptionTableInfoDelete"

    Dim cellRange               As Word.Range
    Dim currentCriteriaNumber   As Long
    Dim currentFindingsType     As String
    Dim exceptionsRow           As Word.Row
    Dim rowCount                As Long
    Dim rowIndex                As Long
    Dim theTable                As Word.Table

    On Error GoTo Do_Error

    ' Get a reference to the Exceptions table
    Set theTable = GetExceptionsTable(m_selectedDropDownIndex)

    ' Make sure the Exception table actually exists before trying to use it!
    If Not theTable Is Nothing Then

        ' Get the table row count which includes the header row
        rowCount = theTable.Rows.Count

        ' Locate the row we need to delete
        For rowIndex = 1 To rowCount
            Set exceptionsRow = theTable.Rows(rowIndex)

            ' Ignore the first fow as it is the table Header
            If Not exceptionsRow.IsFirst Then

                ' Criteria number of the current row
                Set cellRange = exceptionsRow.Cells(mc_cellCriteria).Range
                cellRange.End = cellRange.End - 1
                currentCriteriaNumber = CLng(cellRange.Text)

                ' Is this the criteria number we are looking  for
                If newCriteriaNumber = currentCriteriaNumber Then

                    ' Extract the current Findings Type
                    Set cellRange = exceptionsRow.Cells(mc_cellFindingsType).Range
                    cellRange.End = cellRange.End - 1
                    currentFindingsType = cellRange.Text
                    
                    ' If the two findings type match then we have the row to be deleted
                    If newFindingType = currentFindingsType Then
                        rowToBeDeleted = rowIndex
                        Exit For
                    End If
                End If
            End If
        Next
    End If

    ' Setup the remaining information
    If rowIndex < rowCount Then
        firstRowToRename = rowIndex + 1
        lastRowToRename = rowCount
    Else
        firstRowToRename = 0
        lastRowToRename = 0
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' GetExceptionTableInfoDelete

'===================================================================================================================================
' Procedure:    GetExceptionsTable
' Purpose:      Given a standard number, return a reference to that standards Exception table.
' Notes:        If the Exceptions table does not exist then Nothing is returned.
' Date:         22/07/16    Created.
'
' On Entry:     standardNumber      The standard number to return the Exceptions table reference for.
' Returns:      A reference to the specified Exceptions table.
'===================================================================================================================================
Public Function GetExceptionsTable(ByVal standardNumber As String) As Word.Table
    Const c_proc As String = "modSSARFluentUI.GetExceptionsTable"

    Dim tableBookmarkName   As String
    Dim targetArea          As Word.Range

    On Error GoTo Do_Error

    ' Get the name of the bookmark we need to identify which table to modify
    tableBookmarkName = g_instructions.UserInterface.BookmarkExceptionsTable

    ' Replace the placeholder sequence (there should only be one) with the Standards predicate index number (we actually use the
    ' index of the selected item in the UI's dropDown list - which should be the same)
    tableBookmarkName = Replace$(tableBookmarkName, mgrP1, CStr(standardNumber))

    ' Get a reference to the Range object that will contain the table if present
    With g_assessmentReport.bookmarks
        If .Exists(tableBookmarkName) Then
            Set targetArea = .Item(tableBookmarkName).Range

            ' Make sure a table exists in the range
            If targetArea.Tables.Count > 0 Then

                ' Return a reference to the selected standards Exception table
                Set GetExceptionsTable = targetArea.Tables(1)
            End If
        End If
    End With

Do_Exit:
    Exit Function

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Function ' GetExceptionsTable

Public Sub InvalidateActionControls()
    If Not m_ribbon Is Nothing Then
        m_ribbon.InvalidateControl mc_cidButtonSubmit
        m_ribbon.InvalidateControl mc_cidButtonCancel
    End If
End Sub ' InvalidateActionControls

Public Sub InvalidateDropDownControl()
    Const c_proc As String = "modSSARFluentUI.InvalidateDropDownControl"

    If Not m_ribbon Is Nothing Then
    ' #DEBUG#    EventLog "Invalidating DropDown control", c_proc
        m_ribbon.InvalidateControl mc_cidDropDown
    End If
End Sub ' InvalidateDropDownControl

Public Sub InvalidateReportViewsControls()
    If Not m_ribbon Is Nothing Then
        m_ribbon.InvalidateControl mc_cidButtonRefresh
        m_ribbon.InvalidateControl mc_cidToggleButtonWatermark
    End If
End Sub ' InvalidateReportViewsControls

Public Sub InvalidateToggleButtonControls()
    Const c_proc As String = "modSSARFluentUI.InvalidateToggleButtonControls"

    Dim controlId1      As String
    Dim controlId2      As String
    Dim controlNumber   As Long

    On Error GoTo Do_Error

    If Not m_ribbon Is Nothing Then

        ' Invalidate all of the toggleButton controls so that they can reset their Visibility, etc.
        For controlNumber = 1 To mc_toggleButtonCount

            ' Generate the control id's
            controlId1 = mc_cidToggleButtonBaseNameStrength & CStr(controlNumber)
            controlId2 = mc_cidToggleButtonBaseNameRecommendation & CStr(controlNumber)

            ' Invalidate the toggleButton controls
            m_ribbon.InvalidateControl controlId1
            m_ribbon.InvalidateControl controlId2
        Next
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' InvalidateToggleButtonControls

Public Sub ResetAlmostEverything()
    Const c_proc As String = "modSSARFluentUI.ResetAlmostEverything"

    On Error GoTo Do_Error

    ' Reset all global objects specific to an Assessment Report. We don't reset general global objects
    ' that require persistance: g_wordEvents, g_configuration, g_eventLog and g_hasBeenSubmitted
    Set g_htmlWordDocument = Nothing
    Set g_xmlDocument = Nothing
    Set g_xmlInstructionData = Nothing
    Set g_htmlTextDocument = Nothing

    g_bookmarkCount = 0
    Set g_addsWithRefresh = Nothing
    Set g_actionCounters = Nothing
    Set g_counters = Nothing
    Set g_editableBookmarks = Nothing
    Set g_instructions = Nothing
    Set g_richTextData = Nothing
    Set g_rootData = Nothing
    Set g_ccXMLDataStore = Nothing
    Set g_colourMapBackground = Nothing
    Set g_colourMapForeground = Nothing

    g_standardsCount = 0
    m_selectedDropDownIndex = -1
    Erase m_strengthStateInfo()
    Erase m_recommendationStateInfo()
    Erase m_tbMap()
    Erase m_tbReverseMap()

    ' Now force the ribbon reset
    SSAR_RibbonReset

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' ResetAlmostEverything

'===================================================================================================================================
' Procedure:    SetToggleButtonsTickState
' Purpose:      Sets up an array used to determine whether toggleButton controls should display a tick mark (image).
' Date:         7/07/16     Created.
'
' On Entry:     tickArray           Ignored.
'               tickQuery           The query to use to determine the ticked state of each item in the tick mark array.
'               predicateIndex      A xpath predicate index number used to select the correct xml element for the query.
' On Exit:      tickArray           An array that determines whether a ToggleButton control will display a tick mark image.
'===================================================================================================================================
Private Sub SetToggleButtonsTickState(ByRef tickArray() As Boolean, _
                                      ByVal tickQuery As String, _
                                      ByVal predicateIndex As Long)
    Const c_proc As String = "modSSARFluentUI.SetToggleButtonsTickState"

    Dim indexNumber   As Long
    Dim itemIndex     As Long
    Dim theNodes      As MSXML2.IXMLDOMNodeList
    Dim theQuery      As String
    Dim theText       As String

    On Error GoTo Do_Error

    ' Initialise the tick state array
    ReDim tickArray(1 To mc_toggleButtonCount)

    ' Query picks all nodes that require a tick
    theQuery = Replace$(tickQuery, mgrP1, predicateIndex)
    Set theNodes = g_xmlDocument.SelectNodes(theQuery)

    ' Iterate all nodes that require a tick
    For itemIndex = 1 To theNodes.Length

        ' Use the nodes text value as the index to which item requires a tick image
        theText = theNodes(itemIndex - 1).Text

        ' This is an attempt to deal to null/nil values - which appear on the surface to be invalid?
        If LenB(theText) > 0 Then
            indexNumber = CLng(theText)
        Else
            indexNumber = itemIndex
        End If

        ' Save the tick state of all items for the selected DropDown item
        tickArray(m_tbMap(indexNumber)) = True
    Next

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' SetToggleButtonsTickState

'=======================================================================================================================
' Procedure:    SetupDropdownListData
' Purpose:      Sets up the data consumed by the DropDown control.
'
' On Exit:      m_primaryItemNames  The values to be used as the DropDown controls item labels.
'=======================================================================================================================
Private Sub SetupDropdownListData()
    Const c_proc As String = "modSSARFluentUI.SetupDropdownListData"

    Dim index       As Long
    Dim theQuery    As String
    Dim theNode     As MSXML2.IXMLDOMNode
    Dim theNodes    As MSXML2.IXMLDOMNodeList

    On Error GoTo Do_Error

    EventLog c_proc

    If Not g_instructions Is Nothing Then

        ' Get the query we need for creating the DropDown controls data
        If Not g_instructions.UserInterface Is Nothing Then
            theQuery = g_instructions.UserInterface.QueryBuildDropDown

            ' Run the query to retieve the nodes that will provide the data for the Primary dropDown control
            If LenB(theQuery) > 0 Then
                Set theNodes = g_xmlDocument.SelectNodes(theQuery)

                ' Save the number of Standards as this is needed elsewhere
                g_standardsCount = theNodes.Length

                ' Make sure there actually is some data
                If g_standardsCount > 0 Then

                    ' Resize array to hold the exact number of data items returned by the query
                    ReDim m_primaryItemNames(1 To g_standardsCount)

                    ' Extract the values from the xml and store in module scope array
                    For Each theNode In theNodes
                        index = index + 1

                        ' Get the text value of the current node
                        m_primaryItemNames(index) = theNode.Text
                    Next
                End If
            End If
        End If
    End If

    ' Now that we have assembled the data, invalidate the control so that it rebuilds itself using said data
    InvalidateDropDownControl

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' SetupDropdownListData

'=======================================================================================================================
' Procedure:    SetupSectionImage
' Purpose:      Assigns the image to be used by each of the Section controls.
'
' On Entry:     image               Ignored.
'               hasImage            True if the check icon image should be assigned.
' On Exit:      image               The image to be displayed by a Country control.
'=======================================================================================================================
Private Sub SetupSectionImage(ByRef image As Variant, _
                              ByVal hasImage As Boolean)
    Const c_proc As String = "modSSARFluentUI.SetupSectionImage"

    On Error GoTo Do_Error

    If hasImage Then

        ' This just puts a tick besides the selected menu item
        Set image = Application.CommandBars.GetImageMso("AcceptInvitation", 16, 16)
    Else

        ' This clears any tick besides the selected menu item
        Set image = Nothing
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' SetupSectionImage

Public Sub SSAR_InvalidateGroupControls()
    Const c_proc As String = "modSSARFluentUI.SSAR_InvalidateGroupControls"

    On Error GoTo Do_Error

    If Not m_ribbon Is Nothing Then
        With m_ribbon

            ' It is critical we invalidate the Tab so that its visibility is reassessed
            .InvalidateControl mc_cidTabSSAR

            .InvalidateControl mc_cidGroupActions
            .InvalidateControl mc_cidGroupReportViews
            .InvalidateControl mc_cidGroupReportTypes
            .InvalidateControl mc_cidGroupDropDown
            .InvalidateControl mc_cidGroupButtonsStrength
            .InvalidateControl mc_cidGroupButtonsRecommendation
        End With
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' SSAR_InvalidateGroupControls

'=======================================================================================================================
' Procedure:    SSAR_RibbonReset
' Purpose:      Performs a full reset of the RDA Tab.
' Notes:        We also reset the module level variables used by the RDA Tab for lookup and control state information.
'=======================================================================================================================
Public Sub SSAR_RibbonReset()
    Const c_proc As String = "modSSARFluentUI.SSAR_RibbonReset"

    On Error GoTo Do_Error

    EventLog "m_ribbon Is Nothing = " & (m_ribbon Is Nothing), c_proc

    ' Erase all variables used by the previous Assessment Report instance
    m_insertIndex = 0
    m_selectedDropDownValue = vbNullString
    m_selectedDropDownIndex = -1
    Erase m_primaryItemNames()
    Erase m_strengthStateInfo()
    Erase m_tbMap()
    Erase m_tbReverseMap()

    ' Activate Words 'Home' Tab because if the RDA Tab is active it does not refresh.
    ' This way the user has to select the RDA Tab and that forces the refresh.
    If Not m_ribbon Is Nothing Then
        m_ribbon.ActivateTabMso mc_WCTabHome

        ' Invalidate the SSAR Tab (labled RDA for the users though!)
        m_ribbon.InvalidateControl mc_cidTabSSAR
    End If

    ' Setup the data consumed by the DropDown control
    SetupDropdownListData

    ' The FluentUI does not invaildate child controls when invalidating
    ' any of the container controls so we invalidate everything
    SSAR_InvalidateGroupControls

    ' If the document is not an Assessment Report then all of the Group controls should
    ' be invisible, in which case we do not need to do anything with the child controls
    If IsAssessmentReport Then
        EventLog "Invalidating Action, DropDown and Toggle Button controls", c_proc
        InvalidateActionControls
        InvalidateReportViewsControls
        InvalidateDropDownControl
        InvalidateToggleButtonControls
    End If

    ' Set the global Bookmark count as Bookmarks can get deleted when the
    ' user cuts and pastes a Range exactly equal to the Bookmarks Range
    If Not g_assessmentReport Is Nothing Then
        g_bookmarkCount = g_assessmentReport.bookmarks.Count
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' SSAR_RibbonReset

'===================================================================================================================================
' Procedure:    UpdateEditableDatesXML
' Purpose:      Checks that all editable input areas that contain dates, contain valid dates.
' Note 1:       In addition to dates a null string is also considered valid.
' Date:         05/08/16    Rewritten.
'
' Returns:      True, if all editable date areas of the assessment report contain valid dates.
'===================================================================================================================================
Private Function UpdateEditableDatesXML() As Boolean
    Const c_proc As String = "modSSARFluentUI.UpdateEditableDatesXML"

    Dim allActions  As Actions

    On Error GoTo Do_Error

    ' Reset the error counter
    g_dateValidationError = False

    ' Initialise the counters collection
    Set g_counters = New Counters

    ' The 'action' list used to build the Assessment Report is now used to validate just the editable date input areas
    Set allActions = g_instructions.Actions

    ' Carry out all actions in the Actions list
    allActions.UpdateDateXML

    ' Report any validation errors
    If g_dateValidationError Then
        MsgBox mc_errorDateValidation, vbExclamation Or vbOKOnly, ssarTitle
    Else
        UpdateEditableDatesXML = True
    End If

Do_Exit:
    Exit Function

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Function ' UpdateEditableDatesXML

' The CV prefix on these procedure denotes a function that returns a value for the ActionCounter class
Public Function CV_StandardIndexNumber() As Long
    CV_StandardIndexNumber = m_selectedDropDownIndex
End Function ' CV_StandardIndexNumber

Public Function CV_DeleteRow() As Long
    CV_DeleteRow = m_rowToDelete
End Function ' CV_DeleteRow

Public Function CV_FirstRowToRename() As Long
    ' Subtract 1 as we need to allow for the header row
    CV_FirstRowToRename = m_firstRowToRename - 1
End Function ' CV_FirstRowToRename

Public Function CV_LastRowToRename() As Long
    ' Subtract 1 as we need to allow for the header row
    CV_LastRowToRename = m_lastRowToRename - 1
End Function ' CV_LastRowToRename

Public Function CV_InsertRowAfter() As Long
    CV_InsertRowAfter = m_insertAfterRow
End Function ' CV_InsertRowAfter
