Attribute VB_Name = "modRefresh"
Option Explicit


Public Sub RDAFullRefresh()
    Const c_proc As String = "modRefresh.RDAFullRefresh"

    Dim selected As Word.Range

    On Error GoTo Do_Error

    EventLog c_proc

    ' This is a really nasty kludge to get around a very nasty Word bug.
    ' If the user has text selected in an editable area of the document when this code runs, eventually UpdateAllRefFields
    ' if called. When this procedure runs it deletes the unwanted Editor object added to the Ref Field Result Range.
    ' However, if there is text selected the Editor object for the selected text area is split into two Editor objects,
    ' one either side of the selected text! Given that the Selection object is NOT being used this is very serious.
    ' This kludge gets around it by saving the Selection and collapsing the Selection (which seems to prevent the problem).
    Set selected = Selection.Range
    Selection.Collapse wdCollapseStart

    ' Rebuild the bookmarks before updating the Ref Fields in case the user has pasted data into the
    ' Ref Field source Bookmark, potentially damaging or destroying the Bookmark in the process
    RebuildBookmarksBeforeEdit True

    ' Rebuild all Refreshable document areas (those areas of the assessment report
    ' generated by an Action Add block with refreshable attributes defined
    RefreshAssessmentReport

    ' Now update all of the Ref Fields
    UpdateAllRefFields

    ' Updating the Ref Fields can leave a screwed up document on the screen
    ' where the Ref Fields seem to show data for the wrong source Bookmark
    Application.ScreenRefresh

    ' This is the other part of the above kludge and restores whatever the user had selected
    selected.Select

    ' Now clean up so the user cannot screw up what we've done by using Undo
    g_assessmentReport.UndoClear

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' RDAFullRefresh

'=======================================================================================================================
' Procedure:    RefreshAssessmentReport
' Purpose:      Regenerates all refreshable areas of the Assessment Report.
' Note 1:       For an area to be considered refreshable its Action Add block must contain the attribute 'refresh' and
'               have a value of True.
' Note 2:       The reason a refresh needs to be performed is that the contents of the refreshable area is dependent on
'               the contents of certain bookmarks. If certain bookmarks contain no data then no preface paragraph and
'               no paragraph(s) contain the data are generated. So these sections display a varying number of paragraphs
'               based on content elsewhere in other editable areas of the Assessment Report.
'=======================================================================================================================
Public Sub RefreshAssessmentReport()
    Const c_proc As String = "modRefresh.RefreshAssessmentReport"

    Dim addAction               As ActionAdd
    Dim bmData                  As String
    Dim deletableArea           As Word.Range
    Dim deletableAreaBM         As String
    Dim doDocumentProtection    As DocumentProtection
    Dim index                   As Long
    Dim refreshableNodes        As MSXML2.IXMLDOMNodeList
    Dim testBM                  As String

    On Error GoTo Do_Error

    EventLog c_proc

    If Not g_addsWithRefresh Is Nothing Then

        ' Unprotect the Assessment Report (if it is protected) so that we can refresh the necessary areas.
        ' On termination the instantiated class object will reprotect the document for us.
        Set doDocumentProtection = NewDocumentProtection
        doDocumentProtection.DisableProtection True

        ' Initialise the counters collection
        Set g_counters = New Counters

        For Each addAction In g_addsWithRefresh

            ' The Bookmark name of the area to be deleted
            deletableAreaBM = addAction.RefreshDeleteBookmark

            ' Delete the bookmarks contents and recreate the bookmark name
            With g_assessmentReport.bookmarks
                If .Exists(deletableAreaBM) Then
                    Set deletableArea = .Item(deletableAreaBM).Range
                    deletableArea.Delete
                    .Add deletableAreaBM, deletableArea
                End If
            End With

            ' Find out which nodes have data
            Set refreshableNodes = g_xmlDocument.SelectNodes(addAction.RefreshQuery)

            ' Check that there are nodes that require updating
            If refreshableNodes.Length > 0 Then

                ' Find out which Bookmarks contain data
                For index = 1 To refreshableNodes.Length

                    ' Generate the bookmark name
                    bmData = Replace$(addAction.RefreshBMData, mgrP1, CStr(index))
                    testBM = ReplacePatternData(addAction.RefreshTargetBM, bmData)
                    testBM = Replace$(testBM, mgrP1, CStr(index))

                    ' If the bookmark contains any text do a dirty update of the corresponding xml to that the Action Add selects
                    ' the node. WE need to do this as all of the queries are driven from the xml data, but it's the document that
                    ' contains the actual data. The overhead of properly updating the xml is huge, so we just fudge it by writing
                    ' some data to the xml causing the node to be selected. Once selected the nested Action Link will perform the
                    ' correct update.
                    If LenB(g_assessmentReport.bookmarks(testBM).Range.Text) > 0 Then

                        ' Add junk text to the xml so that the node is selected
                        refreshableNodes(index - 1).Text = "xxx"
                    Else
 
                        ' No data in the bookmark so make sure the node is NOT selected
                        refreshableNodes(index - 1).Text = vbNullString
                    End If
                Next

                ' Now regenerate the document
                BARActionAdd addAction
            End If
        Next
    End If

Do_Exit:

    ' These actions should happen even if there was an error
    Set doDocumentProtection = Nothing

    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' RefreshAssessmentReport

Private Sub DumpEditableAreaInfo()
    Dim bookmarkName  As String
    Dim bmRange         As Word.Range
    Dim dummy         As Word.Range
    Dim editorRange   As Word.Range
    Dim fixBookmark   As Boolean
    Dim index         As Long
    Dim info          As String
    Dim lastEditorStart As Long

    ' Set the starting point for the search for editable ranges to the start of the document
    Set dummy = g_assessmentReport.Content
    dummy.Collapse wdCollapseStart
    dummy.Select

    Do
        lastEditorStart = Selection.Range.Start

        ' Goto the next editable range, when were are at the last editable range this will take us back to the first
        Selection.GoToEditableRange (wdEditorEveryone)
        Set editorRange = Selection.Range

        ' Check to see if we have wrapped around to the first editable range
        If editorRange.Start < lastEditorStart Then Exit Do
        lastEditorStart = editorRange.Start

        index = index + 1

        bookmarkName = g_editableBookmarks.Bookmark(index)
        If g_assessmentReport.bookmarks.Exists(bookmarkName) Then
            Set bmRange = g_assessmentReport.bookmarks(bookmarkName).Range

            ' Dump info
            Debug.Print index & "," & editorRange.Start & "," & editorRange.End & "," & bookmarkName & "," & bmRange.Start & "," & bmRange.End
        Else
            Debug.Print index & "," & editorRange.Start & "," & editorRange.End & "," & bookmarkName & ", ** missing **"
        End If
    Loop
    Exit Sub

        ' Iterate the Editors Dictionary object checking that:
        ' 1. The Bookmark (Dictionary key) actually exists
        ' 2. That the Bookmarks Range matches the Editors Range
        ' If the expected Bookmark does not exist it is created. Likewise if there is
        ' a mismatch in Bookmark Range vs Editor Range the Bookmark will be recreated.
        For index = 1 To g_editableBookmarks.BookmarkCount

            ' Get the key (Bookmark name) and value (an Editor object)
            bookmarkName = g_editableBookmarks.Bookmark(index)


            ' The only way to find Editable ranges is to use the Selection object
            Selection.GoToEditableRange (wdEditorEveryone)
            Set editorRange = Selection.Range

            With g_assessmentReport.bookmarks

                ' Check to see if the bookmark exists
                If .Exists(bookmarkName) Then

                    ' Get the Bookmark Range just the once
                    Set bmRange = .Item(bookmarkName).Range

                    ' Now see if it matches the Editor Range
                    If bmRange.Start <> editorRange.Start Or bmRange.End <> editorRange.End Then
                        info = "Difference detected"
                        fixBookmark = True
                    End If
                Else
                    info = "Undefined bookmark"
                    fixBookmark = True
                End If

                ' See if the Bookmark need recreating or repairing (the same process applies to both)
                If fixBookmark Then

                    ' See if the last character of the Range is a pargraph mark.
                    ' If it is don't include it as part of the editable range.
                    If Right$(editorRange.Text, 1) = vbCr Then

                        ' Delete the current Editor as it includes the paragraph mark
                        editorRange.Editors(1).Delete

                        ' Exclude the final paragraph mark from the Range
                        editorRange.End = editorRange.End - 1

                        ' Recreate the Editor object
                        editorRange.Editors.Add wdEditorEveryone
                    End If

                    Debug.Print info & ", repairing bookmark: " & bookmarkName
                    .Add bookmarkName, editorRange

                    fixBookmark = False
                End If
            End With
        Next

        ' Clear the undo buffer to prevent pottential problems
        g_assessmentReport.UndoClear

End Sub
