VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "xhtmlNode"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'===================================================================================================================================
' Class:        xhtmlNode
' Purpose:      A helper class used by the HTML to XML parser to generate ersatz xhtml from the html generated by Word.
' Note:         This is used to updated the Assessment xml with data entered into the Assessment Report by the user.
'
' Author:       Peter Hewett - Inner Word Limited (innerword@xnet.co.nz)
' Copyright:    Ministry of Social Development (MSD) ©2016 All rights reserved.
' Contact       Inner Word Limited
' details:      134 Kahu Road
'               Paremata
'               Porirua City
'               5024
'               T: +64 4 233 2124
'               M: +64 21 213 5063
'               E: innerword@xnet.co.nz
'
' History:      12/05/16    1.  Moved to this AddIn as part of the SSAR development.
'===================================================================================================================================
Option Explicit

'' NN = Node Name
Private Const mc_NNDiv              As String = "div"

' NS = Name Space
Private Const mc_NSXMLNS            As String = "http://www.w3.org/1999/xhtml"


Private m_currentNode    As MSXML2.IXMLDOMNode
Private m_newBaseNode    As MSXML2.IXMLDOMNode
Private m_oldBaseNode    As MSXML2.IXMLDOMNode
Private m_query          As String

Private m_childNodeAdded As Boolean

Public Sub UpdateRDAXML()
    Const c_proc As String = "xhtmlNode.UpdateRDAXML"

    Dim parentNode As MSXML2.IXMLDOMNode
    
    On Error GoTo Do_Error

    If Not m_oldBaseNode Is Nothing Then

        Set parentNode = m_oldBaseNode.parentNode

        parentNode.replaceChild m_newBaseNode, m_oldBaseNode
    Else
        Err.Raise 666
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' UpdateRDAXML

Public Sub AddAttribute(ByVal targetNode As MSXML2.IXMLDOMNode, _
                        ByVal attributeName As String, _
                        ByVal attributeValue As String)
    Const c_proc As String = "xhtmlNode.AddAttribute"

    Dim xmlAttribute As MSXML2.IXMLDOMAttribute

    On Error GoTo Do_Error

    ' Create the attribute and set its valuse
    Set xmlAttribute = g_xmlDocument.createAttribute(attributeName)
    xmlAttribute.Text = attributeValue

    ' Add the attribute to the target node
    targetNode.Attributes.setNamedItem xmlAttribute

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddAttribute

Private Sub AddAttributes(ByVal targetNode As MSXML2.IXMLDOMNode, _
                          ByVal theHTMLNode As MSHTML.IHTMLDOMNode)
    Const c_proc As String = "xhtmlNode.AddAttributes"

    Dim index         As Long
    Dim htmlAttribute As MSHTML.IHTMLDOMAttribute4

    On Error GoTo Do_Error

    ' An HTML node has a huge number (130+) of attributes, however most are inherited and thus of no interest to us
    For index = 0 To theHTMLNode.Attributes.Length - 1

        ' We only care about specified HTML Attributes
        If theHTMLNode.Attributes(index).specified Then

            ' Cast the node to a type that is useful to us
            Set htmlAttribute = theHTMLNode.Attributes(index)
            AddAttribute targetNode, htmlAttribute.Name, htmlAttribute.NodeValue
        End If
    Next

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddAttributes

Public Sub CurrentNodeAddAttributes(ByVal theHTMLNode As MSHTML.IHTMLDOMNode)
    Const c_proc As String = "xhtmlNode.CurrentNodeAddAttributes"

    Dim index         As Long
    Dim htmlAttribute As MSHTML.IHTMLDOMAttribute4

    On Error GoTo Do_Error

    ' Add all of the html nodes specified attributes to the current node
    AddAttributes m_currentNode, theHTMLNode

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' CurrentNodeAddAttributes

Public Sub AddXMLChildNode(ByVal theHTMLNode As MSHTML.IHTMLDOMNode)
    Const c_proc As String = "xhtmlNode.AddXMLChildNode"

    Dim newNodeName As String

    On Error GoTo Do_Error

    ' If there is no base node then we need to create one - but the query must
    ' be defined at this point as the query yields the new node name
    If m_newBaseNode Is Nothing Then
        CreateBaseNode
    End If

    ' Force the node name to lower case for the xhtml, as the HTML DOM shows node names in upper case
    newNodeName = LCase$(theHTMLNode.nodeName)

    ' Create the new xml/xhtml node
    Select Case newNodeName

    ' If it is a 'p' node,  replace it with a 'div' node
    Case "p"
        AddNamedNode mc_NNDiv
    Case Else
        AddNamedNode newNodeName
    End Select

    ' Add any specified HTML attributes as xml attributes of the current node
    CurrentNodeAddAttributes theHTMLNode

    ' Set this flag so that we know that we can step back to the nodes parent node
    m_childNodeAdded = True

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddXMLChildNode

Public Sub AddTextNodeToCurrentXMLNode(ByVal theHTMLNode As MSHTML.IHTMLDOMNode)
    Const c_proc As String = "xhtmlNode.AddTextNodeToCurrentXMLNode"

    Dim lastChild   As MSXML2.IXMLDOMNode
    Dim newNode     As MSXML2.IXMLDOMNode
    Dim newNodeName As String

    On Error GoTo Do_Error

    ' If there is no base node then we need to create one - but the query must
    ' be defined at this point as the query yields the new node name
    If m_newBaseNode Is Nothing Then
        CreateBaseNode
    End If

    ' If the current nodes last child node is an href (node name 'a') then this is adding the display text for that node
    If m_currentNode.ChildNodes.Length > 0 Then

        ' The first Text Node after adding a HRef (node name 'a') is a HRef child node. But if there is any text following
        ' the 'a' tag it will also be a Text Node, but we dont want it added as the 'a' nodes description as that will overwrite
        ' the HRef's child Text Node value. So we need to check (the Len=0 test) that the HRef (node name 'a') has not already
        ' been assigned text.
        If m_currentNode.lastChild.nodeName = "a" And Len(m_currentNode.lastChild.Text) = 0 Then
            m_currentNode.lastChild.Text = theHTMLNode.Data
            Exit Sub
        End If
    End If

    ' Force the node name to lower case for the xhtml, as the HTML DOM shows node names in upper case
    newNodeName = LCase$(theHTMLNode.nodeName)

    ' Create the new text node and set its value
    Set newNode = g_xmlDocument.createNode(NODE_TEXT, newNodeName, mc_NSXMLNS)
    newNode.Text = theHTMLNode.Data

    ' Now add the new node to the current node, but do NOT make the appended node the current node
    m_currentNode.appendChild newNode

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddTextNodeToCurrentXMLNode

' Rename this proc to AddAnchorNodeToCurrentXMLNode
Public Sub AddAnchorNodeToCurrentXMLNode(ByVal theHTMLNode As MSHTML.IHTMLDOMNode)
    Const c_proc As String = "xhtmlNode.AddAnchorNodeToCurrentXMLNode"

    Dim newNode     As MSXML2.IXMLDOMNode
    Dim newNodeName As String

    On Error GoTo Do_Error

    ' If there is no base node then we need to create one - but the query must
    ' be defined at this point as the query yields the new node name
    If m_newBaseNode Is Nothing Then
        CreateBaseNode
    End If

    ' Force the node name to lower case for the xhtml, as the HTML DOM shows node names in upper case
    newNodeName = LCase$(theHTMLNode.nodeName)

    ' Create a new node using the 'http://www.w3.org/1999/xhtml' namespace
    Set newNode = g_xmlDocument.createNode(NODE_ELEMENT, newNodeName, mc_NSXMLNS)
'''    newNode.Text = theHTMLNode.innerText

    ' Add any specified HTML attributes as xml attributes of the current node
    AddAttributes newNode, theHTMLNode

    ' Now add the new node to the current node, but do NOT make the appended node the current node
    m_currentNode.appendChild newNode

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' AddAnchorNodeToCurrentXMLNode

Private Sub CreateBaseNode()
    Const c_proc As String = "xhtmlNode.CreateBaseNode"

    On Error GoTo Do_Error

    If LenB(m_query) > 0 Then

        ' Get a persistent reference to what is the current base node, but will eventually be replaced by the structure we are adding
        Set m_oldBaseNode = g_xmlDocument.SelectSingleNode(m_query)

        ' Create the new base node with the name of the old (must be the default namespace)
        Set m_newBaseNode = g_xmlDocument.createNode(NODE_ELEMENT, m_oldBaseNode.nodeName, vbNullString)

        ' Set the current node reference to the new base node
        Set m_currentNode = m_newBaseNode
    Else
        Err.Raise 666
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' CreateBaseNode

Private Sub AddNamedNode(ByVal theNodeName As String)
    Const c_proc As String = "xhtmlNode.AddNamedNode"

    Dim newNode As MSXML2.IXMLDOMNode

    On Error GoTo Do_Error

    ' Create a new node using the 'http://www.w3.org/1999/xhtml' namespace
    Set newNode = g_xmlDocument.createNode(NODE_ELEMENT, theNodeName, mc_NSXMLNS)

    ' Append it to the current node and make the node we have just added the current node
    Set m_currentNode = m_currentNode.appendChild(newNode)

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub

Public Sub MakeParentTheCurrentNode()
    Const c_proc As String = "xhtmlNode.MakeParentTheCurrentNode"

    On Error GoTo Do_Error

    If m_childNodeAdded Then
        Set m_currentNode = m_currentNode.parentNode
    End If

Do_Exit:
    Exit Sub

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Sub ' MakeParentTheCurrentNode

Public Sub ResetCurrentNode()
    Set m_currentNode = m_newBaseNode
End Sub ' ResetCurrentNode

Public Property Get CurrentNodeText() As String
    CurrentNodeText = m_currentNode.Text
End Property ' Get CurrentNodeText
Public Property Let CurrentNodeText(ByVal newText As String)
    Const c_proc As String = "xhtmlNode.Let CurrentNodeText"

    On Error GoTo Do_Error

    If m_currentNode Is m_newBaseNode Then

        ' If there is no base node then we need to create one - but the query must
        ' be defined at this point as the query yields the new node name
        If m_newBaseNode Is Nothing Then
            CreateBaseNode
        End If

        ' Add a 'div' child node as that is what we will add the text to
        AddNamedNode mc_NNDiv

        m_childNodeAdded = True
    End If

    m_currentNode.Text = newText

Do_Exit:
    Exit Property

Do_Error:
    ErrorReporter c_proc
    Resume Do_Exit
End Property ' Let CurrentNodeText

Public Property Get Query() As String
    Query = m_query
End Property ' Get Query
Public Property Let Query(ByVal queryValue As String)
    m_query = queryValue
End Property ' Let Query

Public Property Get XML() As String
    If Not m_newBaseNode Is Nothing Then
        XML = m_newBaseNode.XML
    End If
End Property ' Get XML

'=======================================================================================================================
' Procedure:    Get PathToCurrentNode
' Purpose:      Used for debugging the HTML parser that uses this class.
' Notes:        Because the HTML tags are so nested its difficult looking at the verbose xml and seeing what is going on
'               this procedure aids that process by generating a path from the base node to the current node.
'
' Returns:      The path from the base node to the current node.
'=======================================================================================================================
Public Property Get PathToCurrentNode() As String
    Dim path          As String
    Dim theParentNode As MSXML2.IXMLDOMNode

    Set theParentNode = m_currentNode

    Do While Not theParentNode Is Nothing
        path = "/" & theParentNode.BaseName & path
        Set theParentNode = theParentNode.parentNode
    Loop

    PathToCurrentNode = path
End Property ' Get PathToCurrentNode
